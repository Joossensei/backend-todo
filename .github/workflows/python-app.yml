# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: TESTDatabasePassword
          POSTGRES_DB: todo_TEST_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 61010:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up Test database
        run: |
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          while ! pg_isready -h localhost -p 61010 -U postgres; do
            sleep 2
          done
          echo "PostgreSQL is ready!"

          # Set environment variables for the test database
          export TEST_DATABASE_URL="postgresql+asyncpg://postgres:TESTDatabasePassword@localhost:61010/todo_TEST_db"
          export DATABASE_URL="$TEST_DATABASE_URL"
          export SECRET_KEY="test-secret-key-for-github-actions-workflow"
          export DEBUG="True"
          export IS_TEST="True"
          export ACCESS_TOKEN_EXPIRE_DAYS="30"
          export ALGORITHM="HS256"
          export JWT_ISSUER="todo-api"
          export JWT_AUDIENCE="todo-api-client"
          export JWT_LEEWAY="60"
          export BACKEND_CORS_ORIGINS='["http://localhost:3000"]'
          export DB_POOL_MIN="1"
          export DB_POOL_MAX="10"

          # Run Alembic migrations
          echo "Running Alembic migrations..."
          echo "Using database URL: $TEST_DATABASE_URL"
          echo "IS_TEST environment variable: $IS_TEST"
          echo "DATABASE_URL environment variable: $DATABASE_URL"
          # Let's also check what database Alembic is actually connecting to
          echo "Checking what database Alembic connects to:"
          alembic current
          # Run migrations with verbose output
          alembic upgrade head --verbose

          # Check the database
          echo "Checking the database..."
          export PGPASSWORD="TESTDatabasePassword"
          # First, let's see what tables exist
          echo "Available tables:"
          psql -h localhost -p 61010 -U postgres -d todo_TEST_db -c "\dt"
          echo "Checking users table:"
          psql -h localhost -p 61010 -U postgres -d todo_TEST_db -c "SELECT 1 FROM users;"
          echo "Database check complete!"

          echo "Test database setup complete!"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        env:
          TEST_DATABASE_URL: postgresql+asyncpg://postgres:TESTDatabasePassword@localhost:61010/todo_TEST_db
          DATABASE_URL: postgresql+asyncpg://postgres:TESTDatabasePassword@localhost:61010/todo_TEST_db
          SECRET_KEY: test-secret-key-for-github-actions-workflow
          DEBUG: True
          IS_TEST: True
          ACCESS_TOKEN_EXPIRE_DAYS: 30
          ALGORITHM: HS256
          JWT_ISSUER: todo-api
          JWT_AUDIENCE: todo-api-client
          JWT_LEEWAY: 60
          BACKEND_CORS_ORIGINS: '["http://localhost:3000"]'
          DB_POOL_MIN: 1
          DB_POOL_MAX: 10
        run: |
          pytest
